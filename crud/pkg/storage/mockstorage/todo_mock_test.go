// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockstorage

import (
	"context"

	"github.com/sadlil/system-samples/crud/apis/go/crudapiv1"
	mock "github.com/stretchr/testify/mock"
)

// NewMockTodoQuery creates a new instance of MockTodoQuery. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTodoQuery(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTodoQuery {
	mock := &MockTodoQuery{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTodoQuery is an autogenerated mock type for the TodoQuery type
type MockTodoQuery struct {
	mock.Mock
}

type MockTodoQuery_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTodoQuery) EXPECT() *MockTodoQuery_Expecter {
	return &MockTodoQuery_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockTodoQuery
func (_mock *MockTodoQuery) Create(ctx context.Context, todo *crudapiv1.Todo) (*crudapiv1.Todo, error) {
	ret := _mock.Called(ctx, todo)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *crudapiv1.Todo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *crudapiv1.Todo) (*crudapiv1.Todo, error)); ok {
		return returnFunc(ctx, todo)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *crudapiv1.Todo) *crudapiv1.Todo); ok {
		r0 = returnFunc(ctx, todo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crudapiv1.Todo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *crudapiv1.Todo) error); ok {
		r1 = returnFunc(ctx, todo)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTodoQuery_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockTodoQuery_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - todo
func (_e *MockTodoQuery_Expecter) Create(ctx interface{}, todo interface{}) *MockTodoQuery_Create_Call {
	return &MockTodoQuery_Create_Call{Call: _e.mock.On("Create", ctx, todo)}
}

func (_c *MockTodoQuery_Create_Call) Run(run func(ctx context.Context, todo *crudapiv1.Todo)) *MockTodoQuery_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*crudapiv1.Todo))
	})
	return _c
}

func (_c *MockTodoQuery_Create_Call) Return(todo1 *crudapiv1.Todo, err error) *MockTodoQuery_Create_Call {
	_c.Call.Return(todo1, err)
	return _c
}

func (_c *MockTodoQuery_Create_Call) RunAndReturn(run func(ctx context.Context, todo *crudapiv1.Todo) (*crudapiv1.Todo, error)) *MockTodoQuery_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockTodoQuery
func (_mock *MockTodoQuery) Delete(ctx context.Context, id string) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTodoQuery_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockTodoQuery_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockTodoQuery_Expecter) Delete(ctx interface{}, id interface{}) *MockTodoQuery_Delete_Call {
	return &MockTodoQuery_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockTodoQuery_Delete_Call) Run(run func(ctx context.Context, id string)) *MockTodoQuery_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTodoQuery_Delete_Call) Return(err error) *MockTodoQuery_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTodoQuery_Delete_Call) RunAndReturn(run func(ctx context.Context, id string) error) *MockTodoQuery_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockTodoQuery
func (_mock *MockTodoQuery) GetByID(ctx context.Context, id string) (*crudapiv1.Todo, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *crudapiv1.Todo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*crudapiv1.Todo, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *crudapiv1.Todo); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crudapiv1.Todo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTodoQuery_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockTodoQuery_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockTodoQuery_Expecter) GetByID(ctx interface{}, id interface{}) *MockTodoQuery_GetByID_Call {
	return &MockTodoQuery_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockTodoQuery_GetByID_Call) Run(run func(ctx context.Context, id string)) *MockTodoQuery_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTodoQuery_GetByID_Call) Return(todo *crudapiv1.Todo, err error) *MockTodoQuery_GetByID_Call {
	_c.Call.Return(todo, err)
	return _c
}

func (_c *MockTodoQuery_GetByID_Call) RunAndReturn(run func(ctx context.Context, id string) (*crudapiv1.Todo, error)) *MockTodoQuery_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockTodoQuery
func (_mock *MockTodoQuery) List(ctx context.Context, offset int, limit int) ([]*crudapiv1.Todo, error) {
	ret := _mock.Called(ctx, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*crudapiv1.Todo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) ([]*crudapiv1.Todo, error)); ok {
		return returnFunc(ctx, offset, limit)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) []*crudapiv1.Todo); ok {
		r0 = returnFunc(ctx, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*crudapiv1.Todo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = returnFunc(ctx, offset, limit)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTodoQuery_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockTodoQuery_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx
//   - offset
//   - limit
func (_e *MockTodoQuery_Expecter) List(ctx interface{}, offset interface{}, limit interface{}) *MockTodoQuery_List_Call {
	return &MockTodoQuery_List_Call{Call: _e.mock.On("List", ctx, offset, limit)}
}

func (_c *MockTodoQuery_List_Call) Run(run func(ctx context.Context, offset int, limit int)) *MockTodoQuery_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockTodoQuery_List_Call) Return(todos []*crudapiv1.Todo, err error) *MockTodoQuery_List_Call {
	_c.Call.Return(todos, err)
	return _c
}

func (_c *MockTodoQuery_List_Call) RunAndReturn(run func(ctx context.Context, offset int, limit int) ([]*crudapiv1.Todo, error)) *MockTodoQuery_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockTodoQuery
func (_mock *MockTodoQuery) Update(ctx context.Context, todo *crudapiv1.Todo) (*crudapiv1.Todo, error) {
	ret := _mock.Called(ctx, todo)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *crudapiv1.Todo
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *crudapiv1.Todo) (*crudapiv1.Todo, error)); ok {
		return returnFunc(ctx, todo)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *crudapiv1.Todo) *crudapiv1.Todo); ok {
		r0 = returnFunc(ctx, todo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*crudapiv1.Todo)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *crudapiv1.Todo) error); ok {
		r1 = returnFunc(ctx, todo)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTodoQuery_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockTodoQuery_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx
//   - todo
func (_e *MockTodoQuery_Expecter) Update(ctx interface{}, todo interface{}) *MockTodoQuery_Update_Call {
	return &MockTodoQuery_Update_Call{Call: _e.mock.On("Update", ctx, todo)}
}

func (_c *MockTodoQuery_Update_Call) Run(run func(ctx context.Context, todo *crudapiv1.Todo)) *MockTodoQuery_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*crudapiv1.Todo))
	})
	return _c
}

func (_c *MockTodoQuery_Update_Call) Return(todo1 *crudapiv1.Todo, err error) *MockTodoQuery_Update_Call {
	_c.Call.Return(todo1, err)
	return _c
}

func (_c *MockTodoQuery_Update_Call) RunAndReturn(run func(ctx context.Context, todo *crudapiv1.Todo) (*crudapiv1.Todo, error)) *MockTodoQuery_Update_Call {
	_c.Call.Return(run)
	return _c
}
