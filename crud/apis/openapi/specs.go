// Code generated for package openapi by go-bindata DO NOT EDIT. (@generated)
// sources:
// apis/openapi/gen/crudapi.swagger.json
package openapi

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apisOpenapiGenCrudapiSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5d\x8f\xda\x38\x17\xbe\xe7\x57\x1c\xe5\x7d\x2f\x76\xa5\xe9\x64\xda\xad\x2a\x75\xae\x4a\x07\xb6\x42\xaa\x06\x34\x30\x57\xdb\x6a\x64\xe2\x13\x70\xeb\xd8\x19\xdb\x61\xca\x56\xfc\xf7\x95\x1d\x42\x12\x93\x00\x53\xfa\x41\xa5\xe1\x2e\xc9\xf1\xf1\x73\x7c\x9e\xf3\x61\x9b\xaf\x1d\x80\x40\x3f\x90\xd9\x0c\x55\x70\x09\xc1\x8b\xf3\x8b\xe0\xcc\xbe\x63\x22\x96\xc1\x25\xd8\xef\x00\x81\x61\x86\xa3\xfd\x3e\x26\x49\xca\x11\xae\x6e\x6e\x7b\xd0\x1d\x0d\xb4\x13\x06\x08\x16\xa8\x34\x93\xc2\x8a\x2c\x2e\xce\x9f\xaf\xb5\x00\x04\x91\x14\x86\x44\x66\xa3\x0a\x20\xc0\x84\x30\x6e\x25\x3f\xff\xcb\x94\x49\xde\xcc\xec\xf3\x79\x24\x93\xc0\x49\xac\x3a\x00\x2b\x87\xc1\x90\x99\x0e\x2e\xe1\x1f\xf7\x7a\x33\x5c\x90\xc4\x41\x99\x48\x2a\xc7\xa8\x16\x2c\xc2\x72\xe0\x47\x37\x70\x2e\xb5\x9d\x31\x98\x1b\x93\x5e\x86\x21\x97\x11\xe1\xf6\xdd\xe5\xab\xd7\xaf\x5f\xe7\xf6\xe9\x68\x8e\x09\x96\xea\x9d\x6c\xb0\xd1\x10\x49\xa1\xb3\xda\x77\x92\xa6\x9c\x45\xc4\x30\x29\xc2\x4f\x5a\x8a\x52\x36\x55\x92\x66\xd1\x81\xb2\xc4\xcc\x75\xb9\xae\x21\x49\x59\xb8\x78\x1e\x1a\x49\x65\x75\x89\x66\x58\x5d\x31\x0b\x37\x4b\x12\xa2\x96\xd6\xa8\xf7\x4c\x1b\x6b\x3b\xdc\x8c\xae\x40\xa1\x51\x0c\x17\xa8\x81\x00\x67\xda\x80\x8c\xc1\x7d\x94\xd3\x4f\x18\x19\x7d\xbe\xf6\x83\x53\x22\x53\x54\x0e\xd4\x80\x7a\x0b\x78\x57\x28\xad\x8a\x2b\xd4\xa9\x14\x1a\x75\x0d\x0a\x40\xf0\xe2\xe2\xc2\x7b\x05\x10\x50\xd4\x91\x62\xa9\x59\xb3\xa0\x0b\x3a\x8b\x22\xd4\x3a\xce\x38\x14\x9a\xaa\x68\x72\xb3\xac\x17\xc8\x96\x32\x80\xe0\xff\x0a\x63\xab\xe7\x7f\x21\xc5\x98\x09\x66\xf5\xea\x70\xf1\xbc\x00\x7a\xb3\x56\x19\xd4\x06\xae\x2a\x4f\xab\xea\x5c\x01\xc5\x98\x64\xdc\xec\xc7\x2d\x20\x13\xf8\x25\xc5\xc8\x20\x05\x54\x4a\xaa\xef\x07\x5f\xa5\xd1\xd8\x10\x93\xe9\x1d\xa8\x3b\x0d\xf8\x83\x94\x28\x92\xa0\x41\x55\x92\x2c\xff\x79\xc6\x14\xb1\xc1\x59\xc2\x8c\x8f\x96\x39\x03\xef\x33\x54\x4b\xff\x93\xc2\xfb\x8c\x29\xb4\xb4\x88\x09\xd7\xe8\x7d\x36\xcb\xd4\xa9\xd5\x46\x31\x31\xf3\x07\xc7\x52\x25\xc4\xc5\x1b\x13\xe6\xd5\xcb\xa0\xcd\x07\x2d\x58\x65\x1c\x6b\xfc\x5d\xc0\x6a\xa9\xcc\x50\x51\x54\x3f\x0c\xef\x63\x01\xe5\x7c\xfa\x49\xab\x87\x22\x4b\x3c\x06\xba\xf7\x93\x61\x6f\x78\x37\x9e\x74\x27\xb7\xe3\xbb\xdb\xeb\xf1\xa8\x7f\x35\xf8\x7b\xd0\xef\x79\xc3\x3d\xc1\x51\xff\xba\x37\xb8\x7e\xb7\x5b\x68\x70\x7d\x37\xba\x19\xbe\xbb\xe9\x8f\xc7\xbb\x05\x7b\xc3\xeb\xfe\x1e\x89\xfe\xfb\xfe\x64\x1f\xa8\xee\xdb\xee\xb5\x55\xd5\xab\x87\xe8\xc7\x33\x3f\x6b\x14\xe9\xa4\xd5\xf6\x47\x3a\x32\x55\x4c\x2a\x66\xb6\xfc\xf5\x43\x88\xd5\x69\xb0\xab\x5e\x6e\x8b\xa5\xf1\x8b\xac\x1b\xd4\xf1\xcc\x0a\xd2\xbc\xe0\x36\x17\xac\x2b\x85\xc4\xe0\xa6\x64\x45\xee\xd1\x16\x2c\x81\x0f\xd5\x62\x75\x68\xad\x2a\xf5\x9d\x7c\xb5\x2a\xa1\x3e\xd5\x2b\xf7\x6b\x21\xff\x54\xd2\x16\xe2\x37\x7d\xa9\xf0\xde\xa8\xcc\xa7\xfd\x71\x5e\xba\xcf\x50\x9b\x43\xcc\x3d\x2e\x72\x3a\x95\x15\xab\x75\x81\xe1\x57\x46\x57\x87\xb6\x82\xef\xb0\xb9\x13\xd4\x4c\xcc\x38\x56\x63\x0b\xa6\x44\x23\x05\x29\x80\x19\x0d\x83\xde\xa1\xb1\xb6\x9e\xe1\xe4\x03\x6d\x8d\xf3\x29\xca\xdc\xaf\x25\xca\x18\x6d\x8e\x31\xbb\x29\x79\x5c\x8c\xfd\xc4\xd2\x42\x91\xa3\xc1\xd6\x10\x98\xcc\x11\x7a\x4e\x64\x13\x09\xf9\x08\x1b\x07\xdf\x21\x00\x4a\xdd\x27\x13\x03\xc5\xe2\xe7\x86\x6d\xb7\x33\xa9\xb2\xf6\x18\x96\xa3\x5b\x3d\x85\x42\x65\xda\xdf\x3a\x14\xd2\xac\xbd\x14\xdc\xa6\xb4\xda\x64\x65\xee\x51\x03\x11\x80\x5f\x98\x36\x4c\xcc\xbe\xa5\xd5\x2a\xb5\x9e\x0c\xfb\xdb\x2a\x40\x09\xf5\xa9\x08\xb8\xdf\xaf\x64\xfe\x01\xfb\x9d\x5f\xd9\xf2\x55\x28\x5e\xd2\xe6\xad\x9d\xf6\x27\x35\x7e\x9b\x23\xce\x0a\xaa\xf2\x54\xb0\x1d\x5e\xa5\x2f\x6c\xa9\x02\x5e\xf6\xaf\xf2\x64\xc9\x25\xa1\x7e\xc8\xb6\x85\x93\x8b\xf9\x8e\x6f\x7d\xbd\x6f\x4d\x95\x34\x72\x9a\xc5\x5d\x71\x14\xb2\x37\xeb\x01\x35\x5c\x6d\xe4\x5a\x6d\x65\x45\x42\xa9\x43\x4d\xf8\xa8\xa1\xf0\x15\x58\xcb\xf8\x3a\x02\x69\x24\x69\x2b\x50\x26\x0c\xce\xbc\x73\xa1\xfa\x69\xd3\x5f\x2f\x82\xc6\x08\x4e\x50\x6b\x32\x3b\x7c\x05\x2a\x43\x29\x1a\xc2\xf8\x56\x1e\x2e\x86\x12\xa5\x48\x3d\x94\x02\x66\x30\xf1\xe5\xf7\xf5\x14\x2d\x24\xa9\xba\xbf\x39\x4d\x35\xb2\xa6\x69\xbf\x75\x84\x4f\xbc\xa3\xf3\x1d\x78\x0f\x23\x75\xe3\xa6\xfd\xa4\xf0\xf9\x7b\x9d\x93\x02\xb7\x75\x3e\x7f\x24\xba\x5f\xc4\x6d\xdf\xdc\x43\x68\x3d\xf1\x2e\x71\x1e\x6b\x2e\xdb\x4a\xce\x3b\x0e\x63\xfd\xe6\x24\xcb\x18\x85\x4c\xb0\xfb\x0c\xf9\x12\x14\xa6\x0a\x35\x0a\x63\x3b\xc0\x65\x6d\x1f\xc4\x04\x98\x39\x82\x36\x52\x91\x19\x9e\x83\xdd\x40\x2d\x08\xcf\x10\x64\xfc\x41\x30\x0a\x0f\x8c\x73\x98\x22\xcc\x50\xd8\xbe\x10\x29\x4c\x97\xf9\x90\xa5\x36\x98\xc0\xc3\x9c\x71\x74\x2f\xac\x7f\x80\x69\x98\xa2\x6d\x2f\x23\x27\x7c\xde\x9c\xa8\xd6\x55\xff\x5b\xad\xbb\xd5\xa8\x20\x55\x72\xc1\x28\x52\xa0\x4c\xa7\x9c\x2c\xc1\x2a\x05\x19\x6f\xb0\xb4\xcc\x5d\xd7\xf5\xe8\x1c\xbb\x39\x98\x3d\x12\xbe\xa3\x17\x52\x28\xf4\x15\xc8\x27\xc3\xde\xf0\x0c\x22\x22\x40\x0a\xbe\xb4\x2b\xaf\xd1\x00\x81\x5c\xef\xc6\x37\x30\xfa\xe3\xe2\xd9\xcb\x3f\x5b\x6c\xcc\x0f\x55\x69\xd7\xef\x62\x77\xa2\x2c\xab\x93\x6d\x32\x9e\x19\x96\xe0\x4e\x33\xf2\xc4\x48\x81\x18\xb0\xb2\xda\x90\x24\x3d\xab\x72\xed\x61\x8e\x39\xbb\x50\x18\xb5\xac\x52\x03\xab\x44\xca\x34\xaa\x56\x5f\x11\xca\x99\x38\x9a\x2b\xc5\x62\x17\xfa\x40\xa7\x18\xb1\x98\x21\xb5\x01\x40\xb3\x7c\xc3\x73\x06\x4c\x50\x16\xb9\x9d\x92\x23\x11\x4b\xd0\x82\xdc\xd8\x61\x88\xfe\xfc\x41\xe8\xb9\xcc\x38\xb5\x9e\x89\x64\x92\x72\x6c\xa7\xb9\xf6\x5b\x0c\xd8\x97\x62\xc6\xdb\xf7\x37\xbe\x41\xb9\x48\x1b\xd1\xb7\xfa\x21\x6f\xb4\x8b\xfd\x75\x8b\x51\xcb\x0b\xf5\xfd\x60\x43\x2e\x6b\xef\x97\x3c\x2f\x6c\x5f\x0b\x1d\x70\x21\xb4\xe7\x2a\xe8\x80\x4b\xa0\x5d\xd7\x3f\x7b\x2e\x7e\x76\x5f\xf9\x7c\xac\xac\xe5\xde\x6b\x9e\x5d\xeb\xbe\xf6\x9c\x5d\x9e\x35\x23\x73\x9e\xa5\x52\x6b\x36\xe5\x36\x0b\x3b\xee\xc9\x78\x8f\x3b\x1a\x36\xb7\xa7\x50\xf5\x37\xdb\x18\xfc\x62\x50\x09\xc2\x7b\x32\xaa\xec\x63\x32\xc5\x8b\x7f\x61\xe8\xcb\x30\x9c\x31\x33\xcf\xa6\xe7\x91\x4c\x42\x6d\xa3\x92\x87\xda\xfd\x9b\x44\x87\x46\x21\x86\x09\x61\x22\x8c\x54\x46\xed\x74\xab\xce\xaa\xf3\x5f\x00\x00\x00\xff\xff\x43\xfa\xfb\x9c\x9c\x22\x00\x00")

func apisOpenapiGenCrudapiSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_apisOpenapiGenCrudapiSwaggerJson,
		"apis/openapi/gen/crudapi.swagger.json",
	)
}

func apisOpenapiGenCrudapiSwaggerJson() (*asset, error) {
	bytes, err := apisOpenapiGenCrudapiSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "apis/openapi/gen/crudapi.swagger.json", size: 8860, mode: os.FileMode(420), modTime: time.Unix(1740953926, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"apis/openapi/gen/crudapi.swagger.json": apisOpenapiGenCrudapiSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"apis": &bintree{nil, map[string]*bintree{
		"openapi": &bintree{nil, map[string]*bintree{
			"gen": &bintree{nil, map[string]*bintree{
				"crudapi.swagger.json": &bintree{apisOpenapiGenCrudapiSwaggerJson, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
