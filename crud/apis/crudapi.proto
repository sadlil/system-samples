syntax = "proto3";

package crudapi.v1;

import "google/api/annotations.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate/validate.proto";


option go_package = "github.com/sadlil/system-samples/crud/apis/go/crudapipb";

// TodoService service provides a set of APIs for CRUD operations on Todo objects.
service TodoService {
  // CreateTodo RPC creates a new Todo object.
  rpc CreateTodo(CreateTodoRequest) returns (CreateTodoResponse) {
    option (google.api.http) = {
      post: "/api/v1/todo"
      body: "*"
    };
  }

  // ListTodo RPC retrieves a list of Todo objects.
  rpc ListTodo(ListTodoRequest) returns (ListTodoResponse) {
    option (google.api.http) = {get: "/api/v1/todo"};
  }

  // GetTodo RPC retrieves a single Todo object based on its ID.
  rpc GetTodo(GetTodoRequest) returns (GetTodoResponse) {
    option (google.api.http) = {get: "/api/v1/todo/{id}"};
  }

  // UpdateTodo RPC updates an existing Todo object.
  rpc UpdateTodo(UpdateTodoRequest) returns (UpdateTodoResponse) {
    option (google.api.http) = {
      put: "/api/v1/todo/{id}"
      body: "*"
    };
  }

  // The DeleteTodo RPC deletes a Todo object based on its ID.
  rpc DeleteTodo(DeleteTodoRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {delete: "/api/v1/todo/{id}"};
  }
}

// TodoStatus enum defines the possible states of a Todo object.
enum TodoStatus {
  TODO_STATUS_UNSPECIFIED = 0;
  TODO_STATUS_PENDING = 1;
  TODO_STATUS_IN_PROGRESS = 2;
  TODO_STATUS_DONE = 3;
  TODO_STATUS_DELETED = 4;
  TODO_STATUS_ABANDONED = 5;
}

// Todo message represents a Todo object.
message Todo {
  // uuid uniquely represents any Todo object in the storage. The value of
  // id will be generated by the system while the todo is being crated.
  string id = 1;

  // User provided display name of the todo.
  string name = 2 [(validate.rules).string = {
    min_len: 2,
    max_len: 100
  }];
  string description = 3 [(validate.rules).string.max_len = 500];

  // User defined priority of the TODO, can only be set a string value of P(0-4).
  string priority = 4 [(validate.rules).string = {
    in: [
      "P0",
      "P1",
      "P2",
      "P3",
      "P4"
    ]
  }];

  // Created at timestamp, represents when the entry is being created by the user.
  google.protobuf.Timestamp created_at = 5;

  // User defined deadline specified in duration, indicates the time by when the task
  // should be completed.
  google.protobuf.Duration deadline = 6 [(validate.rules).duration.required = true];

  // Status of the todo.
  TodoStatus status = 7 [(validate.rules).enum.defined_only = true];
}

message CreateTodoRequest {
  Todo todo = 1 [(validate.rules).message.required = true];
}

message CreateTodoResponse {
  Todo todo = 1;
}

message ListTodoRequest {
  int64 limit = 1;
  int64 offset = 2;
  string sort_order = 3;
  TodoStatus status = 4;
  string priority = 5;
}

message ListTodoResponse {
  repeated Todo todos = 1;
}

message GetTodoRequest {
  string id = 1 [(validate.rules).string.min_len = 1];
}

message GetTodoResponse {
  Todo todo = 1;
}

message UpdateTodoRequest {
  string id = 1 [(validate.rules).string.min_len = 1];
  Todo payload = 2 [(validate.rules).message.required = true];
}

message UpdateTodoResponse {
  Todo todo = 1;
}

message DeleteTodoRequest {
  string id = 1 [(validate.rules).string.min_len = 1];
}

// Following are options for Swagger generations.
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Sample CRUD APIs",
    version: "v0.1.0";
    contact: {email: "kzirtm@gmail.com"};
  };
  host: "http://localhost:6999";
  external_docs: {url: "https://github.com/sadlil/samples/tree/main/crud"}
  schemes: HTTP;
  consumes: "application/json";
  produces: "application/json";
};